#include "button.h"

#include <graphics/color.h>
#include <graphics/glyph.h>
#include <graphics/text.h>
#include <graphics/vga.h>

namespace resl {

namespace {

    /* 1d7d:884a : 65 bytes */
    const GlyphData<3, 21> g_menuItemGlyph1 = {
        0x7F, 0xFF, 0xFE, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF,
        0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFF, 0xFD, 0xE0, 0x00, 0x01,
        0x7F, 0xFF, 0xFE
    };

    /* 1d7d:87f4 : 86 bytes */
    const GlyphData<4, 21> g_menuItemGlyph2 = {
        0x7F, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x00, 0xC0, 0x8F, 0xFF, 0xFF, 0xC0,
        0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0,
        0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0,
        0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0,
        0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0,
        0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0, 0x90, 0x00, 0x01, 0xC0,
        0x9F, 0xFF, 0xFF, 0xC0, 0xFF, 0xFF, 0xFF, 0xC0, 0x7F, 0xFF, 0xFF, 0x80
    };

    /* 1d7d:879e : 86 bytes */
    const GlyphData<4, 21> g_menuItemGlyph3 = {
        0x7F, 0xFF, 0xFF, 0x80, 0x80, 0x00, 0x00, 0x40, 0x8F, 0xFF, 0xFE, 0x40,
        0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40,
        0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40,
        0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40,
        0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40,
        0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40, 0x90, 0x00, 0x01, 0x40,
        0x8F, 0xFF, 0xFE, 0x40, 0x80, 0x00, 0x00, 0x40, 0x7F, 0xFF, 0xFF, 0x80
    };

    /* 1d74:0000 : 47 bytes */
    const GlyphData<3, 15> g_firstMenuItemTextArea = {
        0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0,
        0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0,
        0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0,
        0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0, 0xFF, 0xFF, 0xE0
    };

} // namespace

int buttonHeight() noexcept
{
    return g_menuItemGlyph1.height;
}

int buttonWidth() noexcept
{
    // each byte represents 8 pixels
    return g_menuItemGlyph1.width * 8;
}

void drawButton(std::int16_t x, std::int16_t y, const char* caption)
{
    drawGlyph(g_menuItemGlyph1, x, y, Color::White);
    drawGlyph(g_menuItemGlyph2, x, y, Color::Gray);
    drawGlyph(g_menuItemGlyph3, x, y, Color::Black);
    if (caption)
        drawText(x + 7, y + 5, caption, Color::Black);
}

/* 15e8:047b */
void toggleButtonState(std::int16_t x, std::int16_t y)
{
    if (y > 350)
        y -= 350;

    vga::setDataRotation(0x18); // rotation = 0, mode = XOR
    drawGlyph(g_firstMenuItemTextArea, x + 4, y + 3, Color::Yellow);
    vga::setDataRotation(0);
}

} // namespace resl
